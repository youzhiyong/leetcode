package com.yzy.leetcode;

/**
 * Description:
 颠倒给定的 32 位无符号整数的二进制位。



 示例 1：

 输入: 0000001010010100 0001111010011100
 输出: 0011100101111000 0010100101000000
 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 示例 2：

 输入：11111111111111111111111111111101
 输出：10111111111111111111111111111111
 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。


 提示：

 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。


 进阶:
 如果多次调用这个函数，你将如何优化你的算法？
 * Date: 2019-02-27
 *
 * @author youzhiyong
 */
public class LeetCode190 {

    public static void main(String[] args) {

        int n = 3;
        //964176192
        int head = solution2(n);
        System.out.println(head);

    }

    public static int solution(int n) {
        return Integer.reverse(n);
    }

    // 有符号右移>>（若正数,高位补0,负数,高位补1）
    // 无符号右移>>>(不论正负,高位均补0)
    // 注意：负数需要转换成补码 即符号位不变，其余补位 按位取反，末位加一
    public static int solution2(int n) {
        int result = 0;
        for (int i = 0; i < 32; i++) {  //一次循环操作：把n的末位的第i位的数值 赋值到 result的高位第i的位置
            int temp = n >> i;  // 这里用 >> 或者 >>>都可以，因为下一步会重置不需要的数据
            temp = temp & 1;
            temp = temp << (31 - i);
            result = result | temp;
        }
        return result;
    }


}
